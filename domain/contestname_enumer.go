// Code generated by "enumer -type=ContestName"; DO NOT EDIT.

//
package domain

import (
	"fmt"
)

const _ContestNameName = "Atcoder"

var _ContestNameIndex = [...]uint8{0, 7}

func (i ContestName) String() string {
	if i < 0 || i >= ContestName(len(_ContestNameIndex)-1) {
		return fmt.Sprintf("ContestName(%d)", i)
	}
	return _ContestNameName[_ContestNameIndex[i]:_ContestNameIndex[i+1]]
}

var _ContestNameValues = []ContestName{0}

var _ContestNameNameToValueMap = map[string]ContestName{
	_ContestNameName[0:7]: 0,
}

// ContestNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ContestNameString(s string) (ContestName, error) {
	if val, ok := _ContestNameNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ContestName values", s)
}

// ContestNameValues returns all values of the enum
func ContestNameValues() []ContestName {
	return _ContestNameValues
}

// IsAContestName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ContestName) IsAContestName() bool {
	for _, v := range _ContestNameValues {
		if i == v {
			return true
		}
	}
	return false
}
